# vim: syntax=py

from pyroute2 import IPRoute
ip = IPRoute()

def ip_by_interface(name):
    return ip.get_addr(label=name)[0].get_attr('IFA_ADDRESS')

from scapy.all import get_if_hwaddr
def mac_by_interface(name):
    return int(get_if_hwaddr(name).replace(':', ''), 16)

import socket
def aton(ip):
    return socket.inet_aton(ip)

# ====================================================
#       Port Setup
# ====================================================

#import sys
ifname = 'foo' #$IFNAME!'NULL'
#if ifname is 'NULL':
#    print('need a port name. e.g., IFNAME="eth0"')
#    sys.exit(1)
print('Setting up port {}'.format(ifname))

# TODO: Get iface using peer index
intf_kern = PMDPort(name="intf_kern", vdev="net_af_packet0,iface={}-vdev".format(ifname))
intf_dpdk = PMDPort(name="intf_dpdk", port_id=0)

# ====================================================
#       Module Setup
# ====================================================

intf_kern_in::PortInc(port=intf_kern.name)
intf_dpdk_in::PortInc(port=intf_dpdk.name)

classify::BPF()
routes::IPLookup()

merge_intf_kern::Merge()
merge_intf_dpdk::Merge()

intf_kern_out::PortOut(port=intf_kern.name)
intf_dpdk_out::PortOut(port=intf_dpdk.name)

# ====================================================
#       Processing pipeline
# ====================================================

merge_intf_kern -> intf_kern_out
intf_kern_in -> merge_intf_dpdk -> intf_dpdk_out

router_ip = ip_by_interface(ifname)
# Classify traffic
#   1: ARP for me
#   2: Any traffic destined to me
#   3: IP traffic to routed
filter1 = {"priority": -1, "filter": "arp host {}".format(router_ip), "gate": 1}
filter2 = {"priority": -2, "filter": "dst host {}".format(router_ip), "gate": 2}
filter3 = {"priority": -3, "filter": "ip", "gate": 3}
classify.clear()
classify.add(filters=[filter1, filter2, filter3])

intf_dpdk_in -> classify
classify: 0 -> Sink()
classify: 1 -> merge_intf_kern
classify: 2 -> merge_intf_kern
classify: 3 -> routes

# Default route
srcmac = mac_by_interface(ifname)
routes.add(prefix='0.0.0.0', prefix_len=0, gate=0)
routes: 0 \
    -> default_route::Update(fields=[{'offset': 0, 'size': 6, 'value': 0xdeadbeefdead},
                                     {'offset': 6, 'size': 6, 'value': srcmac}]) \
    -> merge_intf_dpdk

# Add routes and update dst/src MAC accordingly
# TODO - make this dynamic using pyroute2

